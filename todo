
additional functionality:
  *make it allow manual numbers of projects for TL and maybe manual amount of NW (both in backend and frontend)

speed:
  give each model a place to store data: pot needs to store gen and awarded cost, maybe budget
  profile code?
  see why form page is slow to load
  investigate caching
  investigate hosting elsewhere

input page:
  *improve interface, eg hide technology inputs initially with jquery, add individual fields?, disallow editing of year and technology, disable editing when technologies are turned off, get rid of decimals, maybe add choice options for prices? http://www.yergler.net/blog/2009/09/27/nested-formsets-with-django/ http://www.yergler.net/blog/2013/09/03/nested-formsets-redux/
    errors for form fields being empty/incorrect?
    change form to not use 2020 input
  *create upload csv function OR spreadsheet layout editable: do we need both?
    csv upload:
      pros - simpler to do (probably)
      cons - messy for user having to upload file, hard to check for errors.
    embedded table: https://paramquery.com/
      pros - can all be done in one place, can update database immediately, can provide more advanced functionality if desired like nested tables
      cons - need to learn to use the libray, may be slow, may not be easy to add new rows?
    html textarea with grid: http://jsfiddle.net/uos06r59/3/ http://www.techrepublic.com/blog/web-designer/how-to-get-the-ruled-paper-background-effect-with-css3/ http://stackoverflow.com/questions/9468153/textarea-with-horizontal-rule http://stackoverflow.com/questions/3540194/how-to-make-a-grid-like-graph-paper-grid-with-just-css
      pros - fairly basic so less likely to break
      cons - fairly basic so more likely to break!
    embedded microsoft or google spreadsheet
      pros - full spreadsheet functionality
      cons - not sure how easy it is to get data out of and into, spreadsheet would need to be stored somewhere, seems hacky


refactor:
  refactor views:
    research class-based views and class-based generic views http://programeveryday.com/post/writing-django-views-function-based-views-class-based-views-and-class-based-generic-views/
    think about whether context can be made smaller, using template tags instead? https://www.webforefront.com/django/setupdjangocontextprocessors.html http://djangobook.com/advanced-templates/
  think about rounding without losing data (though I think it's really only TL where this is a big problem)



policy model:
  make a new model that groups together preferences
  allow naming of inputs, like new wholesale prices?
  allow input group to have a source


tests:
  make sure I am testing everything / make failing gas test pass
  test excel quirks
    download view
  remove useless tests and duplicate import code
  deal with the fact that tests need to be run separately

think about output page:
  add totals row to tables
  split by technology

lower priority:
  create a 'rerun auction' button
  add javascript to delete buttons
  improve jquery on output page to be by technology
  allow creating more auction periods
  make it easy to add new technology?
  comparison model: make a new model that groups together sets of scenarios and allows you to compare them side by side


 ----
NB: be careful that fixtures now contain results

 ----
research:
  *check with Angela about NW carry problem?
  add in data from £730m after auction has happened
  see if I can find data for new CCGT/carbon prices
  look at technology costs from 2016 BEIS paper

diverge from Excel model:
  ?create normal distribution of projects?
  maxima/minima?
  change the way each year is based on cumulative generation with the cost distribution therefore including previously funded projects
  make it so technologies can be included some years and not other years
  add geothermal

Resolved issues:
  * realised that solar PV was affected by the previous years. Because there are projects already funded at the lowest levelised costs, these ones aren't eligible in eg 2022. the way I've fixed this for now is just putting 0 for all years up to but not including 2020 in the number of projects in Excel version

Unresolved issues:
  * tidal is still funny because of the levelised cost being manually inputted for projects. Means I can't always match the answers. I've added a scenario option to sort of account for this, though it's only for the case of max_levelised cost = 150.
  * there seems to be a weird quirk that £89m extra is carried over each year than ought to be, because NW is counted in initial budget, but then 'unspent' is calculated by subtracting only the auction and negotiation spend from the initial budget
  * there's also a problem with trying to keep the generation constant while changing reference to gas prices, because you might think that cumulative generation is the same but if some of the distribution has shifted into 2020 then what you're paying for after that will be different.
  * figure out why sometimes technologies end up in wrong pot in form
