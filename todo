extend python logic to do full calculations:
  *get the right answers given cumulative generation figures and previous year awarded crossed off
  *figure out separate negotiations and negawatts
  *think about accumulation and whether the pot is restarted at 2026
  *include comparison to gas prices
  *check results are identical

  write tests


inputs:
  improve interface, eg with longer fields accepting series of values, field labels, hide technology inputs initially with jquery, disallow editing of year and technology. ability to turn off technologies (put deployment to 0 for all years), use nested forms? maybe add choice options for prices? (nb the technology form order reflects the order in the database, so could change this with fixtures)
  *make wholesale/gas price adjustable
  make it so you can alter an existing scenario rather than the default
  make assumptions adjustable?
    normal/even distribution
    smaller projects can't receive funding if next big one is rejected?
    unaffordable project divergence?

output page:
  *improve summary data, eg generation and cost of each technology (maybe display in table)
  add graphs/visualisations
  give option to display inputs with jquery
  create csv output option


http://www.yergler.net/blog/2009/09/27/nested-formsets-with-django/ http://www.yergler.net/blog/2013/09/03/nested-formsets-redux/

diverge from Excel model:
  ?create normal distribution of projects?
  maxima/minima?

speed up!/refactor:
  review lru_cache and consider initialising instance variables and then doing lazy calculation. and find out how to clear cache? (or at least do this http://stackoverflow.com/questions/2237624/applying-python-decorators-to-methods-in-a-class)
  simplify model code eg by making template tags? http://stackoverflow.com/questions/28513528/passing-arguments-to-model-methods-in-django-templates
  maybe write some code that converts csv to json fixture format
  add javascript to delete buttons
  deal with error message: a value is trying to be set on a copy of a slice from a DataFrame
